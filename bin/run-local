#!/usr/bin/env python2.7

import os
import sys
import argparse
import yaml
import subprocess
import shutil

SRC = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
LIB_PATH = SRC + '/lib'
sys.path.insert(0, LIB_PATH)

import job
import job2sh

os.environ['SRC'] = SRC
#PST_USER = os.environ['USER']
TMP = "/tmp/pst-tmp"
os.environ['TMP'] = TMP
os.environ['PATH'] = os.environ['PATH'] + ":%s/bin" % SRC
os.environ['BENCHMARK_ROOT'] = '/tmp/perf-test/benchmarks'

opt_result_root = None
opt_set_key_value = {}

parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output', help="dir for storing all results", type=str)
parser.add_argument('-s', '--set', nargs='*', help="--set 'KEY: VALUE' add YAML hash to job", type=str)
parser.add_argument('-j', '--jobfile', help="specify job file", type=str)

args = parser.parse_args()
opt_result_root = args.output
jobfile = args.jobfile

if args.set:
    for i in args.set:
        opt_set_key_value.update(yaml.load(i))

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

if not jobfile:
    print "No jobfile specified"
    sys.exit(1)

jobfile=os.path.abspath(jobfile)
if not os.path.isfile(jobfile):
    print "%s is not file" % jobfile

def create_result_root(_result_root):
    for i in range(0, 100):
        result_root = _result_root + os.sep + str(i)
        if os.path.exists(result_root):
            continue
        os.makedirs(result_root, 02775)
        return result_root
    sys.stderr.write("Cannot create more result_roots under %s" % _result_root)
    return None

job = job.Job()
job.load(jobfile)

HOSTNAME = os.environ['HOSTNAME'] 
job['testbox'] = HOSTNAME
job['commit'] = subprocess.check_output('uname -r', shell=True).strip('\n')
job['rootfs'] = subprocess.check_output('grep -m1 ^ID= /etc/os-release', shell=True).split('=')[1].strip('\n')

if opt_set_key_value:
    for k, v in opt_set_key_value.iteritems:
        job[k] = v

if opt_result_root == None:
    _result_root = job._result_root()
    result_root = create_result_root(_result_root)
    if not result_root:
        print "Can't create result_root: %s" % _result_root
        sys.exit(1)
    os.environ['RESULT_ROOT'] = result_root
else:
    result_root = opt_result_root

os.environ['TMP_RESULT_ROOT'] = os.environ['RESULT_ROOT']

if os.path.exists(TMP):
    shutil.rmtree(TMP)
os.makedirs(TMP)

job_script = result_root + '/job.sh'
with open(job_script, 'w') as f:
    j2s = job2sh.Job2sh()
    j2s.job2sh(job.to_hash(), f)
os.chmod(job_script, 0775)

subprocess.call(job_script + ' run_job', shell=True)
subprocess.call(SRC + '/bin/post-run', shell=True)
subprocess.call(job_script + ' extract_stats', shell=True)

job.save(result_root + '/job.yaml')
