#!/usr/bin/env python

import os
import sys
import argparse
import yaml
import subprocess
import shutil
import copy
import time

TIMEFORMAT='%Y-%m-%d-%X'

SRC = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
WORKSPACE = SRC + '/workspace'
LIB_PATH = SRC + '/lib'
sys.path.insert(0, LIB_PATH)

import job
import job2sh
import common

os.environ['SRC'] = SRC
#PST_USER = os.environ['USER']
TMP = "%s/tmp/pst-tmp" % WORKSPACE
os.environ['TMP'] = TMP
os.environ['PATH'] = os.environ['PATH'] + ":%s/bin" % SRC
os.environ['BENCHMARK_ROOT'] = '%s/benchmarks' % WORKSPACE

opt_result_root = None
opt_set_key_value = {}
opt_upload_url = None

parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output', help="dir for storing all results", type=str)
parser.add_argument('-s', '--set', nargs='*', help="--set 'KEY: VALUE' add YAML hash to job", type=str)
parser.add_argument('-j', '--jobfile', help="specify job file", type=str)
parser.add_argument('-u', '--uploadurl', help="upload results to server", type=str)

args = parser.parse_args()
opt_result_root = args.output
jobfile = args.jobfile
opt_upload_url = args.uploadurl

if args.set:
    for i in args.set:
        opt_set_key_value.update(yaml.load(i))

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

if not jobfile:
    print "No jobfile specified"
    sys.exit(1)

jobfile=os.path.abspath(jobfile)
if not os.path.isfile(jobfile):
    print "%s is not file" % jobfile

def create_result_root(result_root):
    os.makedirs(result_root, 02775)
    return result_root

job = job.Job()
job.load(jobfile)

job['testbox'] = common.get_hostname()
job['commit'] = subprocess.check_output('uname -r', shell=True).strip('\n')
job['rootfs'] = subprocess.check_output('. %s/lib/detect-system.sh; detect_system; echo $_system_name_lowercase' % SRC, shell=True).strip('\n')
job['start_time'] =  time.strftime(TIMEFORMAT, time.localtime())

if opt_set_key_value:
    for k, v in opt_set_key_value.iteritems:
        job[k] = v

_result_root = job._result_root()
if opt_result_root == None:
    result_root = _result_root
else:
    result_root = opt_result_root + os.sep + _result_root
result_root = create_result_root(result_root)
os.environ['RESULT_ROOT'] = result_root

os.environ['TMP_RESULT_ROOT'] = os.environ['RESULT_ROOT']

if os.path.exists(TMP):
    shutil.rmtree(TMP)
os.makedirs(TMP)

job_script = result_root + '/job.sh'
with open(job_script, 'w') as f:
    j2s = job2sh.Job2sh()
    j2s.job2sh(copy.deepcopy(job.to_hash()), f)
os.chmod(job_script, 0775)

subprocess.call(job_script + ' run_job', shell=True)
subprocess.call(SRC + '/bin/post-run', shell=True)
subprocess.call(job_script + ' extract_stats', shell=True)

job.save(result_root + '/job.yaml')

if opt_upload_url:
    try:
        subprocess.check_call(SRC + '/bin/upload' + ' ' + opt_upload_url + ' ' + result_root, shell=True)
    except subprocess.CalledProcessError, ex:
        print(
            "FAIL: Run command: %s"
            "message: %s\nreturncode: %s\n output: %s\n"
            % (ex.cmd, ex.message, ex.returncode, ex.output))
        sys.exit(1)
