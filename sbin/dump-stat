#!/usr/bin/env python2.7

import sys
import re
import os
import collections

RESULT_ROOT = os.environ['RESULT_ROOT']
SRC = os.environ.get('SRC')
if not SRC:
    SRC = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
LIB_PATH = SRC + '/lib'
sys.path.insert(0, LIB_PATH)
import common

monitor = sys.argv[1]
result = collections.OrderedDict()
invalid_records = []
record_index = 0

for line in sys.stdin:
    if re.match(r'^#.*', line) or re.match(r'^$', line):
        continue
    k, v = line.split(': ')
    if not v:
        continue

    k = monitor + '.' + k
    if not result.get(k):
        result[k] = []
    size = len(result[k])
    if record_index < size:
        record_index = size
    elif record_index - size > 0:
        # fill 0 for missing values:
        result[k] = result[k] + [0] * (record_index - size)

    if re.search(r'[ \t]', k):
        invalid_records.append(record_index)
        sys.stderr.write("whitespace in stats name: " + v)

    # strip like 99%
    v = v.replace('%', '')
    if '.' in v:
        v = float(v)
    # match time
    elif re.search(r'\d{2}:\d{2}:\d{2} \d{4}', line):
        pass
    else:
        v = int(v)

    #print "outside valid range: %s in %s %s" % (v, k, RESULT_ROOT)
    result[k].append(v)

if len(result) == 0:
    sys.exit(1)

max_cols = 0
min_cols = float('inf')
min_clos_stat = ''
zero_stats = []
for k, v in result.iteritems():
    if max_cols < len(v):
        max_cols = len(v)
    if min_cols > len(v):
        min_cols = len(v)
        min_clos_stat = k
    if v[0] != 0:
        continue
    if v[-1] != 0:
        continue
    if sum(v) != 0:
        continue
    zero_stats.append(k)
for k in zero_stats:
    result.pop(k)

if min_cols < max_cols:
    if min_cols == max_cols - 1:
        for k, v in result.iteritems():
            if v.size == max_cols:
                v.pop()
        print "Last record seems incomplete. Truncated %s/%s.json" % (RESULT_ROOT, monitor)
    else:
        sys.stderr.write*("Not a matrix: %s: %s != %s: %S/%s.json" % (min_clos_stat, min_cols, max_cols, RESULT_ROOT, monitor))

if len(result) == 0 or len(result.values()[0]) == 0 or len(result.values()[-1]) == 0:
   sys.exit(1)

common.save_json(result, RESULT_ROOT + '/' + monitor + '.json')
